{"version":3,"sources":["button.js","dadJokeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["ButtonComponent","props","console","log","onClick","className","style","id","children","DadJokeGenerator","state","showAnswer","bind","fetcher","showData","this","setState","show","axios","get","then","response","data","setup","punchline","catch","e","a","backgroundColor","textAlign","position","left","src","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+SAEe,SAASA,EAAgBC,GAEtC,OADAC,QAAQC,IAAIF,GAEV,4BACEG,QAASH,EAAMG,QACfC,UAAWJ,EAAMI,UACjBC,MAAOL,EAAMK,MACbC,GAAIN,EAAMM,IAETN,EAAMO,U,UC2FEC,E,kDA/Fb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,GACb,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBALJ,E,gEASZG,KAAKF,Y,mCAILX,QAAQC,IAAI,OACZY,KAAKC,SAAS,CACZC,MAAOF,KAAKL,MAAMO,S,gCAIX,IAAD,OACRC,IACGC,IAAI,qDACJC,MAAK,SAACC,GAAc,IAAD,EACSA,EAASC,KAA9BC,EADY,EACZA,MAAOC,EADK,EACLA,UACb,EAAKR,SAAS,CACZO,QACAC,YACAP,MAAM,OAGTQ,OAAM,SAACC,GAAD,OAAOxB,QAAQC,S,iCAIxB,IAAIwB,EACF,yBAAKtB,UAAW,SAAUC,MAAO,CAAEsB,gBAAiB,YACjDb,KAAKL,MAAMa,OAGhB,OAAIR,KAAKL,MAAMO,KAEX,oCACE,yBAAKZ,UAAW,UACbsB,EACD,yBACEtB,UAAW,SACXC,MAAO,CACLsB,gBAAiB,UACjBC,UAAW,QACXC,SAAU,WACVC,KAAM,QAGPhB,KAAKL,MAAMc,YAGhB,kBAACxB,EAAD,CACEI,QAASW,KAAKF,QACdP,MAAO,CACLsB,gBAAiB,SAHrB,YAYF,oCACE,yBAAKvB,UAAW,UAAWsB,GAC3B,kBAAC3B,EAAD,CAAiBI,QAASW,KAAKJ,WAAYJ,GAAI,WAA/C,e,+BASN,OACE,oCACE,yBAAKA,GAAG,YACN,yBAAKF,UAAU,UACb,yBACE2B,IAAK,wCACLC,IAAK,eAGRlB,KAAKD,iB,GAzFeoB,IAAMC,WCAtBC,MAHf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.bae2aa5d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function ButtonComponent(props) {\n  console.log(props);\n  return (\n    <button\n      onClick={props.onClick}\n      className={props.className}\n      style={props.style}\n      id={props.id}\n    >\n      {props.children}\n    </button>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\n// import { Button, Alert } from \"react-bootstrap\";\nimport ButtonComponent from \"./button\";\nimport \"./App.css\";\n\nclass DadJokeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n    this.showAnswer = this.showAnswer.bind(this);\n    this.fetcher = this.fetcher.bind(this);\n    this.showData = this.showData.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetcher();\n  }\n\n  showAnswer() {\n    console.log(\"hai\");\n    this.setState({\n      show: !this.state.show,\n    });\n  }\n\n  fetcher() {\n    axios\n      .get(\"https://official-joke-api.appspot.com/random_joke\")\n      .then((response) => {\n        let { setup, punchline } = response.data;\n        this.setState({\n          setup,\n          punchline,\n          show: false,\n        });\n      })\n      .catch((e) => console.log);\n  }\n\n  showData() {\n    let a = (\n      <div className={\"shower\"} style={{ backgroundColor: \"#af23b8\" }}>\n        {this.state.setup}\n      </div>\n    );\n    if (this.state.show) {\n      return (\n        <>\n          <div className={\"center\"}>\n            {a}\n            <div\n              className={\"shower\"}\n              style={{\n                backgroundColor: \"#4487cd\",\n                textAlign: \"right\",\n                position: \"relative\",\n                left: \"17%\",\n              }}\n            >\n              {this.state.punchline}\n            </div>\n          </div>\n          <ButtonComponent\n            onClick={this.fetcher}\n            style={{\n              backgroundColor: \"blue\",\n            }}\n          >\n            Another\n          </ButtonComponent>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <div className={\"center\"}>{a}</div>\n          <ButtonComponent onClick={this.showAnswer} id={\"tell-me\"}>\n            Tell me!\n          </ButtonComponent>\n        </>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div id=\"sub-root\">\n          <div className=\"marque\">\n            <img\n              src={\"https://dadjokegenerator.com/logo.png\"}\n              alt={\"something\"}\n            />\n          </div>\n          {this.showData()}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default DadJokeGenerator;\n","import React from \"react\";\nimport DadJokeGenerator from \"./dadJokeGenerator\";\n\nfunction App() {\n  return <DadJokeGenerator />;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}